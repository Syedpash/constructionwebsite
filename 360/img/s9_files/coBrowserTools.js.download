
// IE 9 fix
if (typeof console == "undefined") {
    this.console = {
        log: function() {},
        info: function() {},
        error: function() {},
        warn: function() {}
    };
}

if( console.debug == undefined){
   console.debug = console.log;
}

// IE9 fix additional parameters to setTimeout setInterval
if (document.all && !window.setTimeout.isPolyfill) {
    var __nativeST__ = window.setTimeout;
    window.setTimeout = function (vCallback, nDelay /*, argumentToPass1, argumentToPass2, etc. */) {
        var aArgs = Array.prototype.slice.call(arguments, 2);
        return __nativeST__(vCallback instanceof Function ? function () {
            vCallback.apply(null, aArgs);
        } : vCallback, nDelay);
    };
    window.setTimeout.isPolyfill = true;
}

if (document.all && !window.setInterval.isPolyfill) {
    var __nativeSI__ = window.setInterval;
    window.setInterval = function (vCallback, nDelay /*, argumentToPass1, argumentToPass2, etc. */) {
        var aArgs = Array.prototype.slice.call(arguments, 2);
        return __nativeSI__(vCallback instanceof Function ? function () {
            vCallback.apply(null, aArgs);
        } : vCallback, nDelay);
    };
    window.setInterval.isPolyfill = true;
}



//
var JavaScriptCodeIncluder = new Object();
JavaScriptCodeIncluder.require = function (file, callback) {
    callback = callback ||
        function () {};
    var filenode;
    var jsfile_extension = /(.js)$/i;
    var cssfile_extension = /(.css)$/i;

    if (jsfile_extension.test(file)) {
        filenode = document.createElement('script');
        filenode.src = file;
        // IE
        filenode.onreadystatechange = function () {
            if (filenode.readyState === 'loaded' || filenode.readyState === 'complete') {
                filenode.onreadystatechange = null;
                callback();
            }
        };
        // others
        filenode.onload = function () {
            callback();
        };
        document.head.appendChild(filenode);
    } else if (cssfile_extension.test(file)) {
        filenode = document.createElement('link');
        filenode.rel = 'stylesheet';
        filenode.type = 'text/css';
        filenode.href = file;
        document.head.appendChild(filenode);
        callback();
    } else {
        console.log("Unknown file type to load.")
    }
};

JavaScriptCodeIncluder.requireFiles = function () {
    var index = 0;
    return function (files, callback) {
        if(files.length == 0){
            callback();
            return;
        }
        if(index == 0 && files[0] == ""){
            return;
        }
        index += 1;
        Utilities.require(files[index - 1], callBackCounter);
        files[index - 1] = "";
        function callBackCounter() {
            if (index === files.length) {
                index = 0;
                callback();
                return;
            } else {
                Utilities.requireFiles(files, callback);
            }
        };
    };
}();

//---


function EventTarget(){
    this._listeners = {};
}
EventTarget.prototype = {
    constructor: EventTarget,
    addListener: function(type, listener){
        if (typeof this._listeners[type] == "undefined"){
            this._listeners[type] = [];
        }
        this.useDelegate
        this._listeners[type].push(listener);
    },

    fire: function(event){
        if (typeof event == "string"){
            event = { type: event };
        }
        if (!event.target){
            event.target = this;
        }

        if (!event.type){  //falsy
            throw new Error("Event object missing 'type' property.");
        }

        if (this._listeners[event.type] instanceof Array){
            var listeners = this._listeners[event.type];
            for (var i=0, len=listeners.length; i < len; i++){
                listeners[i].call(this, event);
            }
        }
    },

    removeListener: function(type, listener){
        if (this._listeners[type] instanceof Array){
            var listeners = this._listeners[type];
            for (var i=0, len=listeners.length; i < len; i++){
                if (listeners[i] === listener){
                    listeners.splice(i, 1);
                    break;
                }
            }
        }
    }
};


// url params:

var QSParam = new function() {
    var qsParm = {};
    var query = window.location.search.substring(1);
    var params = query.split('&');
    for (var i = 0; i < params.length; i++) {
        var pos = params[i].indexOf('=');
        if (pos > 0) {
            var key = params[i].substring(0, pos);
            var val = params[i].substring(pos + 1);
            qsParm[key] = val;
        }
    }
    this.isKeyExist = function(query){
        if(qsParm[query]){
            return true;
        }
        else{
           return false;
        }
    };
    this.getValue = function(query){
        if(qsParm[query])
        {
            return qsParm[query];
        }
        return "";
        //throw "URL does not contain query "+ query;
    }
};

//------- TWEEN


IHTween  = function(obj, prop, func, begin, finish, duration, suffixe) {
    this.obj = new Object();
    this.prop='';
    this.func = function (t, b, c, d) { return c*t/d + b; };
    if(func != null){
       this.func = func;
    }
    this.begin = 0;
    this.change = 0;
    this.prevTime = 0;
    this.prevPos = 0;
    this.looping = false;
    this._duration = 0;
    this._time = 0;
    this._pos = 0;
    this._position = 0;
    this._startTime = 0;
    this._finish = 0;
    this.name = '';
    this.suffixe = '';
    this._listeners = new Array();
    this.Delegate = function (o, f) {
       var a = new Array() ;
       var l = arguments.length ;
       for(var i = 2 ; i < l ; i++) a[i - 2] = arguments[i] ;
       return function() {
           var aP = [].concat(arguments, a) ;
           f.apply(o, aP);
        }
    }
    this.setTime = function(t){
        this.prevTime = this._time;
        if (t > this.getDuration()) {
            if (this.looping) {
                this.rewind (t - this._duration);
                this.update();
                this.broadcastMessage('onMotionLooped',{target:this,type:'onMotionLooped'});
            } else {
                this._time = this._duration;
                this.update();
                this.stop();
                this.broadcastMessage('onMotionFinished',{target:this,type:'onMotionFinished'});
            }
        } else if (t < 0) {
            this.rewind();
            this.update();
        } else {
            this._time = t;
            this.update();
        }
    }
    this.getTime = function(){
        return this._time;
    }
    this.setDuration = function(d){
        this._duration = (d == null || d <= 0) ? 100000 : d;
    }
    this.getDuration = function(){
        return this._duration;
    }
    this.setPosition = function(p){
        this.prevPos = this._pos;
        var a = this.suffixe != '' ? this.suffixe : '';
        this.obj[this.prop] = Math.round(p) + a;
        this._pos = p;
        this.broadcastMessage('onMotionChanged',{target:this,type:'onMotionChanged'});
    }
    this.getPosition = function(t){
        if (t == undefined) t = this._time;
        return this.func(t, this.begin, this.change, this._duration);
    };
    this.setFinish = function(f){
        this.change = f - this.begin;
    };
    this.getFinish = function(){
        return this.begin + this.change;
    };
    this.setBegin = function(b){
        this.begin = b;
        this._pos = b;
    };
    this.init = function(obj, prop, func, begin, finish, duration, suffixe){
        if (!arguments.length) return;
        this.isPlaying = false;
        this._listeners = new Array();
        this.addListener(this);
        if(suffixe) this.suffixe = suffixe;
        this.obj = obj;
        this.prop = prop;
        this.begin = begin;
        this._pos = begin;
        this.setDuration(duration);
        if (func!=null && func!='') {
            this.func = func;
        }
        this.setFinish(finish);
    }
    this.start = function(){
        this.rewind();
        this.startEnterFrame();
        this.broadcastMessage('onMotionStarted',{target:this,type:'onMotionStarted'});
        //alert('in');
    }
    this.rewind = function(t){
        this.stop();
        this._time = (t == undefined) ? 0 : t;
        this.fixTime();
        this.update();
    }
    this.fforward = function(){
        this._time = this._duration;
        this.fixTime();
        this.update();
    }
    this.update = function(){
        this.setPosition(this.getPosition(this._time));
        }
    this.startEnterFrame = function(){
        this.stopEnterFrame();
        this.isPlaying = true;
        this.onEnterFrame();
    }
    this.onEnterFrame = function(){
        if(this.isPlaying) {
            this.nextFrame();
            setTimeout(this.Delegate(this, this.onEnterFrame), 0);
        }
    }
    this.nextFrame = function(){
        this.setTime((this.getTimer() - this._startTime) / 1000);
        }
    this.stop = function(){
        this.stopEnterFrame();
        this.broadcastMessage('onMotionStopped',{target:this,type:'onMotionStopped'});
    }
    this.stopEnterFrame = function(){
        this.isPlaying = false;
    }

    this.continueTo = function(finish, duration){
        this.begin = this._pos;
        this.setFinish(finish);
        if (this._duration != undefined)
            this.setDuration(duration);
        this.start();
    }
    this.resume = function(){
        this.fixTime();
        this.startEnterFrame();
        this.broadcastMessage('onMotionResumed',{target:this,type:'onMotionResumed'});
    }
    this.yoyo = function (){
        this.continueTo(this.begin,this._time);
    }

    this.addListener = function(o){
        this.removeListener (o);
        return this._listeners.push(o);
    }
    this.removeListener = function(o){
        var a = this._listeners;
        var i = a.length;
        while (i--) {
            if (a[i] == o) {
                a.splice (i, 1);
                return true;
            }
        }
        return false;
    }
    this.broadcastMessage = function(){
        var arr = new Array();
        for(var i = 0; i < arguments.length; i++){
            arr.push(arguments[i])
        }
        var e = arr.shift();
        var a = this._listeners;
        var l = a.length;
        for (var i=0; i<l; i++){
            if(a[i][e])
            a[i][e].apply(a[i], arr);
        }
    }
    this.fixTime = function(){
        this._startTime = this.getTimer() - this._time * 1000;
    }
    this.getTimer = function(){
        return new Date().getTime() - this._time;
    }
    this.init(obj, prop, func, begin, finish, duration, suffixe);
};
// Motion types
IHTween.regularEaseInOut = function(t,b,c,d){
    if ((t/=d/2) < 1) return c/2*t*t + b;
    return -c/2 * ((--t)*(t-2) - 1) + b;
}
IHTween.bounceEaseOut = function(t,b,c,d){
    if ((t/=d) < (1/2.75)) {
        return c*(7.5625*t*t) + b;
    } else if (t < (2/2.75)) {
        return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;
    } else if (t < (2.5/2.75)) {
        return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;
    } else {
        return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;
    }
}

// ---- Device
// strange prototypejs bug temp fix WTF!!!!!!
var isIos = false;
var Device = {
    // device
    version:-1,
    isIos:false,
    isAndroid:false,
    isPC:false,
    isBlackBerry:false,
    isMobile:false,
    isTablet:false,
    isMSIE:false,
    isIE6:false,
    isIE7:false,
    isIE8:false,
    isIE9:false,
    isIE10:false,
    isIE11:false,
    isChrome:false,
    isTouch : false,
    isFF:false,
    isSafari:false,
    initialized:false,
    isEdge:false,
    initialize: function() {
        this.setDeviceTypes();
        this.initSize();
        isIos = this.isIos;
        this.initialized = true;
    },
    setDeviceTypes: function(){
        // check device type
        var ua = navigator.userAgent;
        this.isFF = ua.indexOf("Firefox") > 0;
        var checker = {
            iphone: ua.match(/(iPhone|iPod|iPad)/),
            blackberry: ua.match(/BlackBerry/),
            android: ua.match(/Android/)
        };
        if (checker.android){
            this.isAndroid = true;
            this.version = ua.split("Android")[1].split(";")[0].split(".");
        }
        else if (checker.iphone){
            this.isIos = true;
            this.version = ua.split("OS")[1].split(" ")[1].split("_");
        }
        else if (checker.blackberry){
            this.isBlackBerry = true;
        }
        else {
            this.isPC = true;
            if(ua.match(/(MSIE 6)/)){
                this.isIE6 = true;
            }
            if(ua.match(/(MSIE 7)/)){
                this.isIE7 = true;
            }
            if(ua.match(/(MSIE 8)/)){
                this.isIE8 = true;
            }
            if(ua.match(/(MSIE 9)/)){
                this.isIE9 = true;
            }
            if(ua.match(/(MSIE 10)/)){
                this.isIE10 = true;
            }
            if(ua.match(/(MSIE 11)/)){
                this.isIE11 = true;
            }
            if(ua.match(/(MSIE)/)){
                this.isMSIE = true;
            }
        }
        if(ua.match(/(Chrome)/) || ua.match(/(CriOS)/)){
            this.isChrome = true;
        }
        if(ua.match(/(Safari)/) && this.isChrome == false){
            this.isSafari = true;
        }
        if(ua.match(/(Edge)/)){
            this.isEdge = true;
            this.isSafari = false;
            this.isChrome = false;
        }
        var deviceAgent = navigator.userAgent.toLowerCase();
        var isMobile = deviceAgent.match(/(iphone|ipod|mobile)/) != null;
        var isIpad = deviceAgent.match(/(ipad)/) != null;
        if(isMobile && isIpad != true){
            this.isMobile = true
            this.isPC = false;
        }
        if((this.isAndroid && this.isMobile == false) || isIpad){
            this.isMobile = true
            //this.isTablet = true;
            this.isPC = false;
        }
        this.check_is_touch_device();

        // get version

        if(this.isFF){
            this.version = Number(ua.split("Firefox/")[1]);
        }else if(this.isChrome){
            try {
                this.version = Number(ua.split("Chrome/")[1].split(" ")[0].split(".")[0]);
            }catch(e){
                this.version = -1;
            }
        }else if(this.isSafari){
            try {
                this.version = ua.split("Version/")[1].split(" ")[0].split(".");
                this.version.pop()
                this.version = Number(this.version.join("."));
            }catch(e){
                this.version = -1;
            }
        }else if(this.isEdge){
            this.version = Number(ua.split("Edge/")[1]);
        }else if(this.isMSIE){
            try{
                this.version = Number(ua.split("MSIE/")[1].split(";")[0]);
            }catch(e){
                this.version = Number(ua.split("MSIE ")[1].split(";")[0]);
            }

        }
        // IE 11 Widnows 10
        var re  = new RegExp("trident/.*rv:([0-9]{1,}[\.0-9]{0,})");
        if (re.exec(deviceAgent) != null){
            this.isMSIE = true;
            this.isIE11 = true;
            this.version = parseFloat( RegExp.$1 );
        }
        //debug
        //this.isMobile = true;
    },
    check_is_touch_device : function() {
        try {

            if("ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch){}else{
                // "no touch"
                return;   }
            document.createEvent("TouchEvent");
            this.isTouch = true;
        } catch (e) {  }
    },
    isNumber:function(n) {
        return (Object.prototype.toString.call(n) === '[object Number]' || Object.prototype.toString.call(n) === '[object String]') &&!isNaN(parseFloat(n)) && isFinite(n.toString().replace(/^-/, ''));
    },
    checkVersion:function(testToVersion){
        if(this.version == -1){
            return true;
        }
        if(Number(testToVersion) <= Number(this.version)){
            return true;
        }
        return false;
    },
    getBrowserName:function(){
        if(this.isChrome){
            return "Chrome"
        }
        if(this.isFF){
            return "FireFox"
        }
        if(this.isMSIE){
            return "IE"
        }
        if(this.isSafari){
            return "Safari"
        }
        if(this.isEdge){
            return "Edge";
        }
        return "none"
    },
    getSystemName:function(){
        if(this.isAndroid){
            return "Android"
        }
        if(this.isIos){
            return "iOS"
        }
        return "PC"
    },
    getName: function(){
        if(this.isMobile){
            return "Phone"
        }
        if(this.isTablet){
            //return "Tablet"
            return "Phone"
        }
        return "PC"
    },
    // screen size
    width:0,
    height:0,
    ratio:0,
    initSize:function(){
        var w1 = Math.max(screen.width,screen.height);
        var h1 = Math.min(screen.width,screen.height);

        var w2 = Math.max(window.document.documentElement.clientHeight,window.document.documentElement.clientWidth)
        var h2 = Math.min(window.document.documentElement.clientHeight,window.document.documentElement.clientWidth)

        this.width = Math.min(w1,w2);

        this.width = Math.min(window.innerWidth,this.width)-4;

        this.height = Math.min(h1,h2);
        this.ratio = this.width/this.height;
    }
}
Device.initialize();


var UserAgentParser = function(){
    // device
        this.version  = -1,
        this.isIos = false,
        this.isAndroid = false,
        this.isPC = false,
        this.isBlackBerry =false,
        this.isMobile = false,
        this.isTablet = false,
        this.isMSIE = false,
        this.isIE6 = false,
        this.isIE7 = false,
        this. isIE8 = false,
        this.isIE9 = false,
        this.isIE10 = false,
        this.isIE11 = false,
        this.isChrome = false,
        this.isTouch =  false,
        this.isFF = false,
        this.isSafari = false,
        this.initialize = false,
        this.isEdge = false,
        this.isCompatibleBrowser = function(requeredBrowser){
            if(requeredBrowser == undefined || requeredBrowser.length == 0){
                return true;
            }
            for(var d = 0 ; d < requeredBrowser.length ; d++){
                if(requeredBrowser[d][0].toLocaleLowerCase() == this.getSystemName().toLocaleLowerCase()){
                    if(requeredBrowser[d].length == 1){
                        return true;
                    }else{
                        for(var b = 1 ; b < requeredBrowser[d].length ; b++){
                            var browser =  requeredBrowser[d][b];
                            if(browser[0].toLocaleLowerCase() == this.getBrowserName().toLocaleLowerCase()){
                                if(browser[1]==undefined || browser[1] == "" ||    this.checkVersion(browser[1])){
                                    return true;
                                }
                            }
                        }
                    }
                }

            }
            return false;
        },
        this.setUserAgent =  function(userAgent){
            // check device type
            var ua = userAgent;
            this.isFF = ua.indexOf("Firefox") > 0;
            var checker = {
                iphone: ua.match(/(iPhone|iPod|iPad)/),
                blackberry: ua.match(/BlackBerry/),
                android: ua.match(/Android/)
            };
            if (checker.android){
                this.isAndroid = true;
                this.version = ua.split("Android")[1].split(";")[0].split(".");
            }
            else if (checker.iphone){
                this.isIos = true;
                this.version = ua.split("OS")[1].split(" ")[1].split("_");
            }
            else if (checker.blackberry){
                this.isBlackBerry = true;
            }
            else {
                this.isPC = true;
                if(ua.match(/(MSIE 6)/)){
                    this.isIE6 = true;
                }
                if(ua.match(/(MSIE 7)/)){
                    this.isIE7 = true;
                }
                if(ua.match(/(MSIE 8)/)){
                    this.isIE8 = true;
                }
                if(ua.match(/(MSIE 9)/)){
                    this.isIE9 = true;
                }
                if(ua.match(/(MSIE 10)/)){
                    this.isIE10 = true;
                }
                if(ua.match(/(MSIE 11)/)){
                    this.isIE11 = true;
                }
                if(ua.match(/(MSIE)/)){
                    this.isMSIE = true;
                }
            }
            if(ua.match(/(Chrome)/) || ua.match(/(CriOS)/)){
                this.isChrome = true;
            }
            if(ua.match(/(Safari)/) && this.isChrome == false){
                this.isSafari = true;
            }
            if(ua.match(/(Edge)/)){
                this.isEdge = true;
                this.isSafari = false;
                this.isChrome = false;
            }
            var deviceAgent = userAgent.toLowerCase();
            var isMobile = deviceAgent.match(/(iphone|ipod|mobile)/) != null;
            var isIpad = deviceAgent.match(/(ipad)/) != null;
            if(isMobile && isIpad != true){
                this.isMobile = true
                this.isPC = false;
            }
            if((this.isAndroid && this.isMobile == false) || isIpad){
                this.isTablet = true;
                this.isPC = false;
            }

            // get version
            if(this.isFF){
                this.version = Number(ua.split("Firefox/")[1]);
            }else if(this.isChrome){
                try {
                    this.version = Number(ua.split("Chrome/")[1].split(" ")[0].split(".")[0]);
                }catch(e){
                    this.version = -1;
                }
            }else if(this.isSafari){
                try {
                    this.version = ua.split("Version/")[1].split(" ")[0].split(".");
                    this.version.pop()
                    this.version = Number(this.version.join("."));
                }catch(e){
                    this.version = -1;
                }
            }else if(this.isEdge){
                this.version = Number(ua.split("Edge/")[1]);
            }else if(this.isMSIE){
                try{
                    this.version = Number(ua.split("MSIE/")[1].split(";")[0]);
                }catch(e){
                    this.version = Number(ua.split("MSIE ")[1].split(";")[0]);
                }

            }
            // IE 11 Widnows 10
            var re  = new RegExp("trident/.*rv:([0-9]{1,}[\.0-9]{0,})");
            if (re.exec(deviceAgent) != null){
                this.isMSIE = true;
                this.isIE11 = true;
                this.version = parseFloat( RegExp.$1 );
            }
            //debug
            //this.isMobile = true;
        },
        this.isNumber = function(n) {
            return (Object.prototype.toString.call(n) === '[object Number]' || Object.prototype.toString.call(n) === '[object String]') &&!isNaN(parseFloat(n)) && isFinite(n.toString().replace(/^-/, ''));
        },
        this.checkVersion = function(testToVersion){
            if(this.version == -1){
                return true;
            }
            if(Number(testToVersion) <= Number(this.version)){
                return true;
            }
            return false;
        },
        this.getBrowserName = function(){
            if(this.isChrome){
                return "Chrome"
            }
            if(this.isFF){
                return "FireFox"
            }
            if(this.isMSIE){
                return "IE"
            }
            if(this.isSafari){
                return "Safari"
            }
            if(this.isEdge){
                return "Edge";
            }
            return "none"
        },
        this.getSystemName = function(){
            if(this.isAndroid){
                return "Android"
            }
            if(this.isIos){
                return "iOS"
            }
            return "PC"
        },
        this.getName =  function(){
            if(this.isMobile){
                return "Phone"
            }
            if(this.isTablet){
                return "Tablet"
            }
            return "PC"
        }
}


var HBRlog = {
    who:"",
    config:0,  // -1 dont write enithing , 0 - no ovveride log , 1 - ovveride log and write only to server  , 2 - write to server and console , 3 - write debug info to console
    init:function(name,config){
        this.config = config;
        if(this.config == 0){
            return;
        }
        this.who = name;
        this.initOverrideConsole();
    },
    /// ovveride console log
    initOverrideConsole:function(){
        this.oldConsole = console;
        this.oldConsole.oldDebug = console.debug;
        this.oldConsole.oldError = console.error;
        this.oldConsole.oldLog = console.log;
        console.log = Tools.Delegate(this,this.consoleLog)
        console.error = Tools.Delegate(this,this.consoleError)
        console.debug = Tools.Delegate(this,this.consoleDebug)
        window.console = console;
    },
    consoleDebug:function(msg){
       if(this.config == 3){
            this.oldConsole.oldDebug(msg);
       }
       this.sendMessage("debug",msg);
    },
    consoleLog:function(msg){
        if(this.config == 2 || this.config == 3){
            this.oldConsole.oldLog(msg);
        }
        this.sendMessage("info",msg);
    },
    consoleError:function(msg){
        if(this.config == 2 || this.config == 3){
            this.oldConsole.oldError(msg);
        }
        this.sendMessage("error",msg);
    },
    sendMessage:function(type,msg){
        if(this.config == -1 || Tools.isDebug){
            return;
        }
        var url = encodeURI(Tools.applicationPath+"../../../log?action=jslog&type=" + type + "&who="+this.who+"&msg=" + msg + "  "+Tools.sessionID);
        if(!$){
            $hbr.ajax({
                url: url,
                dataType: "jsonp",
                success: function (data) {

                }
            });
        }else{
            $.ajax({
                url: url,
                dataType: "jsonp",
                success: function (data) {

                }
            });
        }
    }
}

// Tools
var Tools = {
    isDebug:false,
    isInit:false,
    sendCompressData:false,
    fixRTL: 0,
    isRTL: false,
    mobileMetaTag : null,
    agentImg: null,
    init:function(){
        if(this.isInit){
            // init ones
            return;
        }
        this.isInit = true;
        if(this.getDirection(this.getBody(true)) == "rtl"){
             this.isRTL = true;
        }
        // check if debug mode
        // TODO : change to pass from cookie or param
        if(location.href.split("localhost").length > 1){
            // Jenia 2 PC
            this.isDebug = true;
            this.applicationPath = "http://localhost/";
        }
        if(location.href.split("/Site").length > 1) {
            // Jenia 1 PC
            // this.isDebug = true;
            // this.applicationPath = window.location.href.split("HTML_IH2")[0]+"HTML_IH2/";
        }


        // TODO: move to floatingIfarme.js
        try{
        if(QSParam.isKeyExist("agentImg")){
            verishow.cobrowsing_vars.agentImg = QSParam.getValue("agentImg")
        }else if(verishow.cobrowsing_vars.agentImg){
            this.agentImg = verishow.cobrowsing_vars.agentImg;
        }
        }catch(e){}

        // set metaTag
        this.mobileMetaTag = document.querySelector("meta[name=viewport]");
        if(this.mobileMetaTag == null){
            this.mobileMetaTag = document.createElement("meta");
            this.mobileMetaTag.name = "viewport";
            document.getElementsByTagName('head')[0].appendChild(this.mobileMetaTag);
        }

    },
    uniqID:function(idlength) {
        var charstoformid = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.split('');
        if (! idlength) {
            idlength = Math.floor(Math.random() * charstoformid.length);
        }
        var uniqid = '';
        for (var i = 0; i < idlength; i++) {
            uniqid += charstoformid[Math.floor(Math.random() * charstoformid.length)];
        }
        uniqid += new Date().getTime();
        // one last step is to check if this ID is already taken by an element before
        if(jQuery("#"+uniqid).length == 0)
            return uniqid;
        else
            return uniqID(20)
    },
    disableTouchMove:function(){
        document.addEventListener("touchmove", function (evt)
        {
            evt.preventDefault();
        }, false);
    },
    getElementByIndexes:function(arr) {
        var orArr = arr;
        var arr = arr.split(",");
        var elemetId = arr.shift();
        var target;
        var goodTarget;
        if (elemetId == "-1") {
            target = this.getBody(true);
        } else {
            target = document.getElementById(elemetId)
        }
        goodTarget = target;
        for (var i = 0; i < arr.length; i++) {
            try {
                if (target !== undefined) {
                    goodTarget = target;
                }
                if(arr[i] == ".."){
                    target = target.parentNode;
                }else{
                    target = target.children[arr[i]];
                }
            } catch (e) {
                // if faild return null no goodTarget
                return null;
            }

        }
        if(target != null && orArr.split(",..").length>0){
            target.arrPath = orArr;
        }
        return target;
    },
    setMetaTag:function(data){
        this.mobileMetaTag.content = data;
    },
    Delegate:function (o, f) {
        //        if(f.bind != null){
        //            f.bind(o);
        //            return;
        //        }
        var a = new Array();
        var l = arguments.length;
        for (var i = 2; i < l; i++) a[i - 2] = arguments[i];
        return function () {
            var aP = [].concat(arguments, a);
            if(f == undefined){
                // TODO : fix undefined problem
                //  this.socket.on('connect',Tools.Delegate(this,this.onConnected)); replace to .bind(this);
                return;
            }
            try{
                f.apply(o, aP[0]);
            }catch(e){
                // faild run function
                console.error("Delegate faild "+e);
                try{
                    console.debug(o);
                    console.debug(arguments[0]);
                }catch(e){
                    // ignor trace erro data
                }
                if(!Device.isPC){
                    return;
                }
                // for debug
                //debugger;
                try{
                    f.apply(o, aP[0]);
                }catch(e){

                }

            }

        }
    },
    getPath : function() {
        return window.location.href;
        /*
        var loc = window.location;
        var pathName = loc.pathname.substring(0, loc.pathname.lastIndexOf('/') + 1);
        return loc.href.substring(0, loc.href.length - ((loc.pathname + loc.search + loc.hash).length - pathName.length));
        */
    },
    getBody:function (body,target) {
        if(target == null){
            target  = document;
        }
        if (Device.isFF) {
            if (body) {
                return  target.documentElement.children[1]
            } else {
                return target.documentElement;
            }
        } else {
            if(this.isMSIE && body != true){
                return target.documentElement;
            }
            return target.body;
        }
    },
    getBaseURL:function () {
        return location.protocol + "//" + location.hostname +
            (location.port && ":" + location.port) + "/";
    },
    innerWidth:function () {
        // fix Android 3.2 bug
        //  <meta name="viewport" content="user-scalable=yes, initial-scale=1.0, width=device-width">
        if(Device.isPC){
            return window.innerWidth-15;
        }else{
            return window.innerWidth-4;
        }
    },
    innerHeight:function () {
        return window.innerHeight;
    },
    // return page height width at realTime
    docHeight: function(target){
        if(target == null){
            target = document;
        }
        var db = target.body;      var dde = target.documentElement;
        return Math.max(db.scrollHeight, dde.scrollHeight, db.offsetHeight, dde.offsetHeight, db.clientHeight, dde.clientHeight)
    },
    docWidth: function(target){
        if(target == null){
            target = document;
        }
        var db = target.body;      var dde = target.documentElement;
        return Math.max(db.scrollWidth, dde.scrollWidth, db.offsetWidth, dde.offsetWidth, db.clientWidth, dde.clientWidth)
    },
    getDirection: function(element){
        try{
            var result = "";
            if (element){
                if (window.getComputedStyle){
                    result = window.getComputedStyle(element,null).direction;
                } else if (element.currentStyle){
                    result = element.currentStyle.direction;
                }
            }
        }catch(e){
            return "";
        }
        return result;
    },
    calcFixRTL: function(){
        if(this.isRTL){
             this.fixRTL = (this.getBody().scrollWidth-window.innerWidth)+12;
        }
    },
    getScrollLeft:function (target) {
        if(target == null){
            target = document;
        }
        var left = target.documentElement.scrollLeft;
        if (target.documentElement.scrollLeft == 0) {
            left = this.getBody(false,target).scrollLeft;
        }
        // fix scroller degative position
        this.calcFixRTL();
        left = this.fixRTL+left;
        return left;
    },
    getScrollTop:function (target) {
        if(target == null){
            target = document;
        }
        if (target.documentElement.scrollTop > 0) {
            return target.documentElement.scrollTop;
        } else {
            return this.getBody(false,target).scrollTop;
        }
    },
    config : new Object(),
    applicationPath:"",
    roomID:"-1",
    original_url:"",
    // TODO : make encription
    getUrlParams:function(par){
        if(par == undefined){
            return Base64.encode(encodeURIComponent(JSON.stringify(this.config.urlParams)));
        }else{
            return  Base64.encode(encodeURIComponent(JSON.stringify(par)));
        }
    },
    setUrlParams:function(value){
        try{
            Tools.config.urlParams = JSON.parse(decodeURIComponent(Base64.decode(value)));
        }catch (e){
            // set empty will use defualt config
            Tools.config.urlParams = new Object();
        }
        //
        if(Tools.config.uiParams != undefined){
            Tools.config.urlParams.unsupportedPage = Tools.config.uiParams.unsupportedPage;
            Tools.config.urlParams.log = Tools.config.uiParams.log;
            Tools.config.urlParams.logN = Tools.config.uiParams.logN;
            Tools.config.urlParams.askResendPageTimeOut = Tools.config.uiParams.askResendPageTimeOut;
        }
        //
        this.applicationPath = this.config.urlParams.applicationPath;
        if(this.applicationPath == ""){
            this.config.urlParams.applicationPath = this.applicationPath = window.location.href.split("coBrowser3")[0];
        }
        this.roomID = this.config.urlParams.roomID;
        if(this.config.urlParams.originURL != undefined){
            this.original_url = this.config.urlParams.originURL;
        }
        this.unsupportedPage = this.applicationPath+'coBrowser3/pc/Shell/'+this.config.urlParams.unsupportedPage+'/unsupportedPage.html';
        HBRlog.init(this.config.urlParams.logN,this.config.urlParams.log);
    },
    jsonExtendArray:function(target,src) {
        try {
            for (key in src) {
                if(typeof target[key] == 'object'){
                    if(Array.isArray(src[key])){
                        target[key] = src[key];
                        return ;
                    }
                    this.jsonExtendArray(target[key], src[key])
                }
            }
        }catch(e){
            debugger;
        }
    }
}
Tools.init();




// ----- PostMassage manager
if (!window.postMessage  && !parent.postMessage) {
   console.error("coBrowser not supported in this browser");
}
// iframe.contentWindow
// window
// if(this.isMSI)
//                this.setTargetWindow(parent);
//            else
//                this.setTargetWindow(parent.parent.window);
// var targe = this.ihIframe.contentWindow;
// this.connector = new PostMessageManager(this,targe,window,"chatIframe");
PostMessageManager = function(obj,outTarget,inTarget,name){
    this.obj = obj;
    this.connectionName = name;
    this.outTarget = outTarget;
    this.inTarget = inTarget;
    this.enabled = true;
    if(parent == outTarget && window == window.top){
        console.debug("PostMessage "+name+" Warning register to prente on root");
        this.enabled = false;
    }
    this.remove = function(){
        this.outTarget = null;
        this.inTarget = null;
        this.obj = null;
        this.enabled = false;
        //debugger;
    }
    this.callFunction = function(name) {
        if(!this.enabled){
            return;
        }
        var args = Array.prototype.slice.call(arguments);
        args.unshift(this.connectionName);
        args = JSON.stringify(args);
        this.outTarget.postMessage(args, "*");
    }
    // Recive
    // expert or Session run function on this HTML
    this.runFunction = Tools.Delegate(this,function(e) {
        if(!this.enabled){
            return;
        }
        // Do we trust the sender of this message?  (might be
      // different from what we originally opened, for example).
      //if (e.origin !== "http://example.org")
      //     return;
       var params = e.data;
       if(params.charAt(0) != "["){
           // ignor other post messages
           return;
       }
       try {
           params = eval(params);
       } catch (e) {
           params = JSON.parse(params);
       }
       try {
           if(params[0] == this.connectionName){
               //this.obj[params[1]].apply(this, params[2]);
                params.shift();
                this.startFunction(params);
           }else{
               // no same connection
           }
       } catch (e) {
           // console.log("apply function error "+params[0]+" , "+params[1]);
       }
    })
    this.startFunction = Tools.Delegate(this.obj,function(params){
        var fName = params.shift();
        this[fName].apply(this, params);
    })
    if (typeof this.inTarget.addEventListener != 'undefined') {
       this.inTarget.addEventListener('message', this.runFunction, false);
    }else if (typeof this.inTarget.attachEvent != 'undefined') {
       this.inTarget.attachEvent('onmessage', this.runFunction);
    }else{
        alert("Post messag faild")
    }
}





var ToolsEevents = {
    itilized:false,
    fixRTL: 0,
    isRTL: false,
    checkContentResizeTimeOut : 3000,
    resizeEndTimerHandlerTimeOut : 1000,
    init:function(isScroll,isResize,isMousemove){
        // register ones
//        if(this.isScroll && isScroll){ isScroll = false; }else{ this.isScroll = true; }
//        if(this.isResize && isResize){ isResize = false; }else{ this.isResize = true; }
//        if(this.isMousemove && isMousemove){ isMousemove = false; }else{ this.isMmousemove = true; }
        if(isScroll || isResize || isMousemove){this.itilized = false }
        if(this.itilized){
            return;
        }
        this.itilized = true;
        if(this.getDirection(this.getBody(true)) == "rtl"){
             this.isRTL = true;
        }
        if (typeof window.addEventListener != 'undefined') {
            if(isResize){      window.addEventListener("resize", this.Delegate(this, this.onWindowResize), false);}
            if(isScroll){    this.registerForScroll(document) }
            if(isMousemove){ document.addEventListener("mousemove", this.Delegate(this, this.onMouseMove), false);}
        }
        else if (typeof window.attachEvent != 'undefined') {
            if(isResize){  window.attachEvent("onresize", this.Delegate(this, this.onWindowResize), false);}
            if(isScroll){  this.registerForScroll(this.getBody(true)) }
            if(isMousemove){document.attachEvent("onmousemove", this.Delegate(this, this.onMouseMove), false); }

        }
        if(isResize){
            this.checkContentResize();
        }
    },
    registerForScroll:function(target){
        if (typeof window.addEventListener != 'undefined') {
            target.addEventListener("scroll", this.Delegate(this, this.onScroll), false);
            target.addEventListener("mouseup", this.Delegate(this, this.onMouseUp), false);
        }else{
            target.onscroll = this.Delegate(this, this.onScroll);
            target.mouseUp = this.Delegate(this, this.onMouseUp);
        }
    },
    registerForMouse:function(target){
        if (typeof window.addEventListener != 'undefined') {
            target.addEventListener("mousemove", this.Delegate(this, this.onMouseMove), false);
        }else{
            target.onmousemove = this.Delegate(this, this.onMouseMove);
        }
    },
    checkContentResize : function(){
        var sH =  this.getBody().clientHeight;
        var sW = this.getBody().clientWidth;
        var dH = this.docHeight();
        var dW = this.docWidth();
        var iH = Tools.innerHeight();
        var iW = Tools.innerWidth();
        if(this.lastDocHeight != dH || this.lastDocWidth != dW || this.oldScrollHeight != sH || this.oldScrollWidth != sW || this.oldInnerHeight != iH || this.oldInnerWidth != iW){
            this.fire({ type: "onBodyResize"});
        }
        this.lastDocHeight = dH;
        this.lastDocWidth = dW;
        this.oldScrollHeight = sH;
        this.oldScrollWidth = sW;
        this.oldInnerHeight = iH;
        this.oldInnerWidth = iW;
        window.clearTimeout(this.checkContentResizeEndTimer);
        this.checkContentResizeEndTimer = setTimeout(this.Delegate(this, this.checkContentResize), this.checkContentResizeTimeOut);
    },
    onWindowResize : function(){
       window.clearTimeout(this.resizeEndTimer);
       this.resizeEndTimer = setTimeout(this.Delegate(this, this.resizeEndTimerHandler), this.resizeEndTimerHandlerTimeOut);
    },
    resizeEndTimerHandler:function () {
       if(this.isRTL){
           this.fixRTL = (this.getBody().scrollWidth-window.innerWidth)+12;
       }
       this.fire({ type: "onResize" });
    },
    onMouseUp:function(target){
        try{
            if(target[0].document == undefined){
                if(target[0].scrollerPressed) {
                    this.fire({ type: "onScrollRelease", target: target[0]});
                    target[0].scrollerPressed = false;
                }
            }else{
                if(this.scrollItem.scrollerPressed) {
                    this.fire({ type: "onScrollRelease", target: this.scrollItem});
                    this.scrollItem.scrollerPressed = false;
                }
            }
        }catch(e){

        }
    },
    lastTimeSendScroller:0,
    scrollItem:null,
    onScroll : function(e){
        var diff = new Date().getTime() - this.lastTimeSendScroller;
        this.scrollItem = e[0].target;
        if(this.scrollItem.scrollerPressed == undefined || this.scrollItem.scrollerPressed == false){
            this.scrollItem.scrollerPressed = true;
            this.fire({ type: "onScrollClick" , target:this.scrollItem });
        }
        var scrollLeft = Tools.getScrollLeft(e[0].target);
        var scrollTop = Tools.getScrollTop(e[0].target);

        this.fire({ type: "onScrollNoDelay", target:this.scrollItem , left:scrollLeft, top:scrollTop });    //can also do target.fire("foo")

        if(scrollTop == 1){
            scrollTop = 0;
        }
        if(this.oldScrollLeft == scrollLeft && this.oldScrollTop == scrollTop){
            return;
        }
        window.clearTimeout(this.scrollItem.scrollEndTimer2);
        this.scrollItem.scrollEndTimer2 = setTimeout(this.Delegate(this, this.onMouseUp), 1000,e[0].target);
        if (diff < 500) {
            window.clearTimeout(this.scrollItem.scrollEndTimer);
            this.scrollItem.scrollEndTimer = setTimeout(this.Delegate(this, this.scrollEndTimerHangler), 250,e[0].target,scrollLeft,scrollTop);
            return;
        }
        this.scrollEndTimerHangler([this.scrollItem,scrollLeft,scrollTop])
    },
    scrollEndTimerHangler:function (item) {
        this.oldScrollLeft = item[1];
        this.oldScrollTop = item[2];
        this.fire({ type: "onScroll", target:item[0] , left:item[1], top:item[2] });    //can also do target.fire("foo")
        this.lastTimeSendScroller = new Date().getTime();
    },
    lastTimeSend:0,
    onMouseMove : function(e){
        if (e[0] != null) e = e[0];
        if(e.ignorEvent){
            return;
        }
        var diff = new Date().getTime() - this.lastTimeSend;
        if (e.touches == null) {
            if (!e) e = window.event;
            if (typeof e.pageY == 'number') {
                this.mouseY = e.pageY;
                this.mouseX = e.pageX;
            } else {
                this.mouseY = e.clientY;
                this.mouseX = e.clientX;
            }
        } else {
            var touch = e.touches[0];
            this.mouseY = touch.pageY;
            this.mouseX = touch.pageX;
        }
        this.fire({ type: "onMouseMoveNoDelay" , x : this.mouseX , y : this.mouseY , originalTarget : e.target });
        this.mouseX += this.fixRTL;
        if (this.lastMouseX != this.mouseX || this.lastMouseY != this.mouseY) {
            this.lastMouseX = this.mouseX;
            this.lastMouseY = this.mouseY;
            if (diff < 100) {
                window.clearTimeout(this.mouseMoveEndTimer);
                this.mouseMoveEndTimer = setTimeout(this.Delegate(this, this.mouseMoveEndTimerHangler), 100, e.target);
                return;
            }
            this.lastTimeSend = new Date().getTime();
            this.mouseMoveEndTimerHangler(e.target)
        }
    },
    mouseMoveEndTimerHangler : function(target){
        this.fire({ type: "onMouseMove" , x : this.mouseX , y : this.mouseY , originalTarget : target });

    },
    // global functions ...
    docHeight: function(){
        var db = document.body;      var dde = document.documentElement;
        return Math.max(db.scrollHeight, dde.scrollHeight, db.offsetHeight, dde.offsetHeight, db.clientHeight, dde.clientHeight)
    },
    docWidth: function(){
        var db = document.body;      var dde = document.documentElement;
        return Math.max(db.scrollWidth, dde.scrollWidth, db.offsetWidth, dde.offsetWidth, db.clientWidth, dde.clientWidth)
    },
    getBody:function (body) {
        var FF = navigator.userAgent.indexOf("Firefox") > 0;
        if (FF) {
            if (body) {
                return  document.documentElement.children[1]
            } else {
                return document.documentElement;
            }
        } else {
            if(this.isMSI && body != true){
                return document.documentElement;
            }
            if(body){
                return document.body;
            }else{
                return document.documentElement;
            }

        }
    },
    Delegate:function (o, f) {
        var a = new Array();
        var l = arguments.length;
        for (var i = 2; i < l; i++) a[i - 2] = arguments[i];
        return function () {
            var aP = [].concat(arguments, a);
            f.apply(o, aP);
        }
    },
    getDirection: function(element){
        try{
            var result = "";
            if (element){
                if (window.getComputedStyle){
                    result = window.getComputedStyle(element,null).direction;
                } else if (element.currentStyle){
                    result = element.currentStyle.direction;
                }
            }
        }catch(e){
            return "";
        }
        return result;
    },
    // Event dispatcher
    _listeners : {},
    addListener: function(type, listener){
        if (typeof this._listeners[type] == "undefined"){
            this._listeners[type] = [];
        }

        this._listeners[type].push(listener);
    },

    fire: function(event){
        if (typeof event == "string"){
            event = { type: event };
        }
        if (!event.target){
            event.target = this;
        }

        if (!event.type){  //falsy
            throw new Error("Event object missing 'type' property.");
        }

        if (this._listeners[event.type] instanceof Array){
            try {
                var listeners = this._listeners[event.type];
                for (var i = 0, len = listeners.length; i < len; i++) {
                    listeners[i].call(this, event);
                }
            }catch(e){
                debugger;
            }
        }
    },

    removeListener: function(type, listener){
            if (this._listeners[type] instanceof Array){
                var listeners = this._listeners[type];
                for (var i=0, len=listeners.length; i < len; i++){
                    if (listeners[i] === listener){
                        listeners.splice(i, 1);
                        break;
                    }
                }
            }
        },
    removeAllListeners:function(){
        this._listeners = {};
    }

}


var Mouses = {
    usersMouses:Object,
    init:function(hbrApi) {
        this.hbrAPI = hbrApi;
        this.usersMouses = new Object();
        this.hbrAPI.addListener(hbrAPI.ON_SHARED_OBJECT_CHANGE,Tools.Delegate(this,this.onSharedObjectChange));
        this.hbrAPI.addListener(hbrAPI.ON_USERS_LIST_UPDATED,Tools.Delegate(this,this.usersListUpdated));
        this.hbrAPI.register(this,"hbrApiMouses")

        ToolsEevents.init(false,false,true);
        ToolsEevents.addListener("onMouseMove",Tools.Delegate(this, this.onMouseMove));
    },
    onSharedObjectChange:function(data){
        //debugger;
        // data.path    // changet object path
        // data.newValue // new value of changet object
        // data.obj      // all object
    },
    hbrAPIReady:function(){
        //debugger;

    },
    onMouseMove:function(event){
        this.callFunction("moveMouseTo",this.hbrAPI.myUser.userId,event.x,event.y)
    },
    moveMouseTo:function(id,x,y){
        this.usersMouses[id].element.css({
            "left": x,
            "top": y
        });
    },
    hideMouses:function(){
        for(var id in this.usersMouses){
            this.usersMouses[id].element.hide();
        }
    },
    showMouses:function(){
        for(var id in this.usersMouses){
            this.usersMouses[id].element.show();
        }
    },
    usersListUpdated:function(data){
        for(var id in this.usersMouses){
            this.usersMouses[id].deleteMouse = true;
        }
        var users = data.users;
        if(users.length > 1){
            for(var i in users){
                if(users[i].userId != this.hbrAPI.myUser.userId ){
                    // add/remove mouse for user
                    if(this.usersMouses[users[i].userId] == undefined){
                        this.usersMouses[users[i].userId] = new Object();
                        var mouseID = 'mouse_'+users[i].userId;
                        var mt =  '<div style="position: absolute ; top: 0px ; left: -150px; z-index : 999999;" id="'+mouseID+'">' +
                            '<i class="fa fa-mouse-pointer" style="color:   #000000 ; font-size: 22px"></i>';
                        if(Device.isIos == false) {
                            mt += '<p style="position: relative ; top : -22px ; left : 22px">' + this.hbrAPI.myUser.visitorName + '</p>';
                        }
                        mt += '</div>'
                        $(document.body).append(
                            mt
                        );
                        this.usersMouses[users[i].userId].element = $("#"+mouseID);
                        this.usersMouses[users[i].userId].elementName = mouseID;
                    }
                    this.usersMouses[users[i].userId].deleteMouse = false;
                }
            }
        }
        for(var id in this.usersMouses){
            if(this.usersMouses[id].deleteMouse){
                this.usersMouses[id].element.remove();
            }
        }
    }
}



//  old browser support


// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
if (!Object.keys) {
    Object.keys = (function () {
        'use strict';
        var hasOwnProperty = Object.prototype.hasOwnProperty,
            hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),
            dontEnums = [
                'toString',
                'toLocaleString',
                'valueOf',
                'hasOwnProperty',
                'isPrototypeOf',
                'propertyIsEnumerable',
                'constructor'
            ],
            dontEnumsLength = dontEnums.length;

        return function (obj) {
            if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
                throw new TypeError('Object.keys called on non-object');
            }

            var result = [], prop, i;

            for (prop in obj) {
                if (hasOwnProperty.call(obj, prop)) {
                    result.push(prop);
                }
            }

            if (hasDontEnumBug) {
                for (i = 0; i < dontEnumsLength; i++) {
                    if (hasOwnProperty.call(obj, dontEnums[i])) {
                        result.push(dontEnums[i]);
                    }
                }
            }
            return result;
        };
    }());
}

var CoBrowserManagerObjects = {
    COBROWSER           : "coBrowser",
    ALERTS              : "alerts",
    TOOLS               : "tools",
    COBROWSER_MANAGER   : "coBrowserManager"
}




// Create Base64 Object
var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/\r\n/g,"\n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}}


